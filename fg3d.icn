
#fg3d 2017 FratisGraphics

#Program to utilize Unicons 3D capabilities.

#Some of this code is from the University of Arizona and Rosetta Code. Please contact me if you would like specifics of this.
#shawnfratis@gmail.com

#Made in Unicon, with Unicon IDE
#unicon.sourceforge.net

###############################

link wopen
link color
link graphics
link numbers
link options
link button 
link strings
link colrlist
link interact
link random
link printf
link io

################################

procedure main()

&window := open("fg3d", "gl", "size=1000,700", "bg=black") | stop("can't open window")

message()

###############################
      
repeat {

w := Active() | stop("Active fails")

################################

#not presently used - can be modified to introduce extra mouse events.
   
case e := Event(w) of {

&lpress | &mpress | &rpress: {
x1 := &x
y1 := &y
x2 := y2 := &null
}

################################

#begin basic keyboard commands.

"\z": {
	         WriteImage("fg01.png")#needs to be fixed
              }
"\s": { 
              tank01()             
              }
"\q": { 
              tank02()
              }
"\a":{
              tank03()
              }
"\$": {      
              Refresh()
              }
"\g": {
              WAttrib("eyepos=0.0,0.0,5.0","eyedir=0.0,0.0,1.0")
              }
"\h": {
              WAttrib("eyepos=2.0,0.0,5.0","eyedir=0.0,0.0,1.0")
              }
"\j": { 
              WAttrib("eyepos=4.0,0.0,5.0","eyedir=0.0,0.0,1.0")
              }
"\k": {
	        WAttrib("eyepos=0.0,0.0,5.0","eyedir=0.0,0.0,1.0")
              }
"\p": {
	        WAttrib("eyepos=0.0,2.0,8.0","eyedir=-0.0,0.0,1.0")
              }
"\G": {
              WAttrib("eyepos=0.0,0.0,5.0","eyedir=0.0,0.0,1.0")            
              }
"\H": {
              WAttrib("eyepos=-2.0,0.0,5.0","eyedir=0.0,0.0,1.0")
              }
"\J": {
              WAttrib("eyepos=-4.0,0.0,5.0","eyedir=0.0,0.0,1.0")
              }
"\S": {
              WAttrib("eyepos=0.0,0.0,5.0","eyedir=0.0,0.0,1.0")
              }
"\%": {  
              int()
              }
"\[": {  
              #not used
              }
"\]": {       
              inpgleye01()
              }
"\\": {  
              EraseArea()
              }
"\@": {
              exit()
              }
"\/": {      
              comlist01()
              }
"\,": { 
              #not used
              }
"\?": {  
              helpbox1()
              }
"\:": { 
              helpbox4()
              } 
"\<": { 
              helpbox2()
              } 
"\=": { 
              helpbox5()
              }
"\>": { 
              helpbox3()

	}
    }
  }

WDone()

end

#########################################################

procedure message()

win1 := WOpen("size=800,200", "fg=yellow", "bg=black")

WWrite(win1,"Welcome to fg3d. Press ? for basic instruction screen")
WWrite(win1,"< gives more in-depth instructions. > and : are reference guides")
WWrite(win1,"% to jump into interpeter.")
WWrite(win1,"NOTES: Minimize this window. Voxels might take a while to generate.")

end

###########################################################

procedure helpbox1()

win1 := WOpen("size=800,200", "fg=yellow", "bg=black")

WWrite(win1,"To come back to these instructions press ?")
WWrite(win1,"< gives more in-depth instructions. >,= and : are reference guides")

end

################################################

procedure helpbox3()

win1 := WOpen("size=800,200", "fg=yellow", "bg=black")

 #WAttrib("dx=1", "dy=1")
        WWrite(win1,"           [+y]               ")
        WWrite(win1,"            |                    ")
        WWrite(win1,"            |                 ")	 
        WWrite(win1,"            |               cam = position,direction,up : 0,0,5,0,0,1,0,1,0")
        WWrite(win1,"            |               g hH jJ a k s change views.")
        WWrite(win1,"[-x]--------0-------[+x]    ] is for a basic mouse navigation. ESC after using.")
        WWrite(win1,"            |               forward  0,0,5,0,0,1,0,1,0")
        WWrite(win1,"            |               angle up 0,2,8,0,0,1,0,1,0 ")
        WWrite(win1,"            |               angle side 4,0,5,0,0,1,0,1,0")                              
        WWrite(win1,"            |                    ")
        WWrite(win1,"           [-y]              ")

end

##################################################

procedure helpbox2()

win1 := WOpen("size=800,200", "fg=yellow", "bg=black")

WWrite(win1,"/ main command, \ is erase all")
WWrite(win1,"cube=x,y,z,s,color") 
WWrite(win1,"cyl=x,y,z,h,r1,r2,color") 
WWrite(win1,"sphere=x,y,z,r,color")
WWrite(win1,"plane=x,y,z of 4 corners,color")
WWrite(win1,"Some example values:")
WWrite(win1,"cyl(0_-1_-4_1_.5_.5_12000,65000,10000)")
WWrite(win1,"sphere(0_0.1_-3_.5_65000,1000,1000)")
WWrite(win1,"cube(0_0.5_-2_.5_1000,2000,65000)")
WWrite(win1,"cube 0_0_0_.5_10000,10000,20000")
WWrite(win1,"sphere 0_0_0_.5_20000,10000,10000")

end

procedure helpbox4()

#####################################################

win1 := WOpen("size=900,200", "fg=yellow", "bg=black")

WWrite(win1,"Color (RGB) values must be entered in this format: 65000,65000,65000")
WWrite(win1,"Here are some examples for different shades of red:")
WWrite(win1,"very light weak red     57343,51881,51881  medium strong red       57343,8191,8191")
WWrite(win1,"very light moderate red 60073,49151,49151  medium vivid red        65535,0,0")
WWrite(win1,"very light strong red   62804,46420,46420  dark weak red           27306,16383,16383")
WWrite(win1,"very light vivid red    65535,43689,43689  dark moderate red       32767,10922,10922")
WWrite(win1,"light weak red          49151,38228,38228  dark strong red         38228,5461,5461")
WWrite(win1,"light moderate red      54612,32767,32767  dark vivid red          43690,0,0")
WWrite(win1,"light strong red        60073,27306,27306  very dark weak red      13653,8191,8191")
WWrite(win1,"light vivid red         65535,21845,21845  very dark moderate red  16383,5461,5461")
WWrite(win1,"medium weak red         40959,24575,24575  very dark strong red    19114,2730,2730")
WWrite(win1,"medium moderate red     49151,16383,16383  very dark vivid red     21845,0,0")

end

######################################################

procedure helpbox5()

win1 := WOpen("size=800,200", "fg=yellow", "bg=black")

WWrite(win1,"Note: voxels might take a few secs to generate.")
WWrite(win1,"% for interpereter.")

end

#################################################
#################################################

procedure tank01()   

repeat {
case Event() of {
&ldrag:{
Eye(&x,&y,0,0 ,&y,-1, 0,1,0)
}
"\e": break{
}
}
}
       
end

#################################################

procedure tank02()   

repeat {
case Event() of {
&ldrag:{
Eye(&x,0,&x,0 ,0,-1, 0,1,0)
}
"\e": break{
}
}
}
       
end

#################################################

procedure tank03()   

repeat {
case Event() of {
&ldrag:{
Eye(0,0,&x,0,0,-1, 0,1,0)
}
"\e": break{
}
}
}
       
end

#################################################

procedure inpgleye01()

repeat {

case Event() of {
&ldrag:{

Eye(&x,&y,&y,0 ,0,-1, 0,1,0)

}
"\e": break{
}
}
}
   
end

#################################################
#################################################

procedure psplane01()

      s1 := WRead()
               
      ipx := s1
   
     PresetPlane(ipx)

end

#############end input cubes etc#################
##############Begin OpenGL 3D####################

procedure seteye(px,py,pz,dx,dy,dz,qx,qy,qz)

Eye(px,py,pz,dx,dy,dz,qx,qy,qz)

end

##################################################

procedure inpglcube01(ipx,ipy,ipz,ips,rgb)

Fg(rgb)
DrawCube(ipx,ipy,ipz,ips)

return()

end

##################################################

procedure inpglsphere01(ipx,ipy,ipz,ips,rgb)

Fg(rgb)
DrawSphere(ipx,ipy,ipz,ips)

return()

end

##################################################

procedure inpglcylinder01(ipx,ipy,ipz,ips,ipq,ipa,rgb)

Fg(rgb)
DrawCylinder(ipx,ipy,ipz,ips,ipq,ipa)

end

##################################################

procedure inpglplane01(px,py,pz,pxx,pyy,pzz,pxxx,pyyy,pzzz,pxxxx,pyyyy,pzzzz,rgb)

Fg(rgb)
FillPolygon(px,py,pz,pxx,pyy,pzz,pxxx,pyyy,pzzz,pxxxx,pyyyy,pzzzz)

end

##################################################

procedure PresetPlane(rgb)

Fg(rgb)

FillPolygon(-15,0,15,15,0,15,15,0,-15,-15,0,-15)

end

##############Begin OpenGL 3D TEX##############################
############################################################

procedure texcube01(ipx,ipy,ipz,ips)

WAttrib("texmode=on")

WAttrib("texture=check.png")#change as needed

DrawCube(ipx,ipy,ipz,ips)

WAttrib("texmode=off") 

end

##################################################

procedure texcylinder01(ipx,ipy,ipz,ips,ipq,ipa)

WAttrib("texmode=on")

WAttrib("texture=check.png")#change as needed

DrawCylinder(ipx,ipy,ipz,ips,ipq,ipa)

WAttrib("texmode=off") 

end

##################################################

procedure texplane01(px,py,pz,pxx,pyy,pzz,pxxx,pyyy,pzzz,pxxxx,pyyyy,pzzzz)

WAttrib("texmode=on")

WAttrib("texture=check.png","texcoord 0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0")#change as needed

FillPolygon(px,py,pz,pxx,pyy,pzz,pxxx,pyyy,pzzz,pxxxx,pyyyy,pzzzz)

end

##################################################

procedure texskysphere02()

WAttrib("texmode=on")

WAttrib ("texture=sphere2.png")#change as needed

x := -1
y := 0
z := -5
r := 250

DrawSphere(x,y,z,r)

WAttrib("texmode=off") 

end

##################################################

procedure texskysphere01()

WAttrib("texmode=on")

WAttrib ("texture=sphere1.png")#change as needed

x := -1
y := 0
z := -5
r := 250

DrawSphere(x,y,z,r)

WAttrib("texmode=off") 

end

##################################################

procedure texgroundplane01()

WAttrib("texmode=on")

WAttrib("texture=gplane.png","texcoord=0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0")#change as needed

FillPolygon(-129,-.5,-249,129,-.5,-249,129,-.5,100,-129,-.5,100)

WAttrib("texmode=off") 

end

##################################################

procedure texskyplane01()

WAttrib("texmode=on")

WAttrib("texture=splane.png","texcoord=0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0")#change as needed

FillPolygon(-129,8,-249,129,8,-249,129,8,100,-129,8,100)

WAttrib("texmode=off") 

end

##########################################################
#BEGIN MESH ELEMENTS
##########################################################

procedure tmod01(xdd,v01,v02,v03,v04,v05,v06,v07,v08,v09,v10,v11,v12,v13,v14,v15,cc,dd,ee,ff,zed)

(zq1 := -5+zed,zq2 := -4.5+zed, zq3 := -4+zed)

duk := cc
dad := dd
daq := ee
daz := ff

######################################################

(ya1 := -1+v01,ya2 := -1+v02,ya3 := -1+v03,ya4 := -1+v04,ya5 := -1+v05,ya6 := -1+v06,ya7 := -1+v07,ya8 := -1+v08,ya9 := -1+v09,yn1 := -1+v10,yn2 := -1+v11,yn3 := -1+v12,yn4 := -1+v13,yn5 := -1+v14,yn6 := -1+v15)

######################################################

(xa1 := 0+xdd,xa2 := .5+xdd,xa3 := 1+xdd,xa4 := 1.5+xdd,xa5 := 2+xdd,xa6 := 0+xdd,xa7 := .5+xdd,xa8 := 1+xdd,xa9 := 1.5+xdd,x10 := 2+xdd,x11 := 0+xdd,x12 := .5+xdd,x13 := 1+xdd,x14 := 1.5+xdd,x15 := 2+xdd)

##############

xq1 := xa1 
xq2 := xa2  
xq3 := xa3 
 
xq4 := xa4  
xq5 := xa5 
xq6 := xa6 
 
xq7 := xa7  
xq8 := xa8  
xq9 := xa9
 
xm1 := x10  
xm2 := x11 
xm3 := x12 

xm4 := x13 
xm5 := x14  
xm6 := x15

##############################################

yq1 := ya1 
yq2 := ya2  
yq3 := ya3 
 
yq4 := ya4 
yq5 := ya5 
yq6 := ya6 
 
yq7 := ya7 
yq8 := ya8 
yq9 := ya9 
 
ym1 := yn1  
ym2 := yn2
ym3 := yn3 

ym4 := yn4 
ym5 := yn5  
ym6 := yn6 

######################################################

Fg(duk)
#1
 FillPolygon(xq1,yq1,zq1,xq2,yq2,zq1,xq6,yq6,zq2)

Fg(daq)
#2  
 FillPolygon(xq2,yq2,zq1,xq7,yq7,zq2,xq6,yq6,zq2)

Fg(daz)
#3  
 FillPolygon(xq2,yq2,zq1,xq3,yq3,zq1,xq7,yq7,zq2)

Fg(dad)
#4  
 FillPolygon(xq3,yq3,zq1,xq8,yq8,zq2,xq7,yq7,zq2)

Fg(duk)
#5
 FillPolygon(xq3,yq3,zq1,xq4,yq4,zq1,xq8,yq8,zq2)

Fg(daq)
#6  
 FillPolygon(xq4,yq4,zq1,xq9,yq9,zq2,xq8,yq8,zq2)

Fg(daz)
#7
 FillPolygon(xq4,yq4,zq1,xq5,yq5,zq1,xq9,yq9,zq2)

Fg(dad)
#8  
 FillPolygon(xq5,yq5,zq1,xm1,ym1,zq2,xq9,yq9,zq2)

######################################################

Fg(duk)
#9  
 FillPolygon(xq6,yq6,zq2,xq7,yq7,zq2,xm2,ym2,zq3)

Fg(daq)
#10  
 FillPolygon(xq7,yq7,zq2,xm3,ym3,zq3,xm2,ym2,zq3)

Fg(daz)
#11
 FillPolygon(xq7,yq7,zq2,xq8,yq8,zq2,xm3,ym3,zq3)

Fg(dad)
#12  
 FillPolygon(xq8,yq8,zq2,xm4,ym4,zq3,xm3,ym3,zq3)

Fg(duk)
#13
 FillPolygon(xq8,yq8,zq2,xq9,yq9,zq2,xm4,ym4,zq3)

Fg(daq)
#14  
 FillPolygon(xq9,yq9,zq2,xm5,ym5,zq3,xm4,ym4,zq3)

Fg(daz)
#15  
 FillPolygon(xq9,yq9,zq2,xm1,ym1,zq2,xm5,ym5,zq3)

Fg(dad)
#16  
 FillPolygon(xm1,ym1,zq2,xm6,ym6,zq3,xm5,ym5,zq3)
 
end

######################################################
######################################################

#begin interpreter

global WHITE,MFLAG,PRTBL 	

procedure int(arg)

   local line, lno, pline

   WClose()

	WHITE := ' \t\n\f'

	PRTBL := table()

	MFLAG := 0

       writes("Input> ")
	while line := read() do {
       
		line ? {

			tab(many(WHITE))

			if lno := tab(many(&digits)) & tab(many(WHITE))
 then {

				pline := tab(0)

				PRTBL[numeric(lno)] := pline

				MFLAG +:= 1
			}

			else if (tab(upto(WHITE)) | tab(0)) ==
				("read" | "r") then {
				readprog()

				MFLAG := 0
			}

			else if (tab(upto(WHITE)) | tab(0)) ==
				("write" | "w") then {
				writeprog()

				MFLAG := 0
			}

			else if (tab(upto(WHITE)) | tab(0)) ==
				("delete" | "d") then {
				delprog()

				MFLAG +:= 1
			}

			else if (tab(upto(WHITE)) | tab(0)) ==
				("sequence" | "s") then {
				seqprog()
			}

			else if (tab(upto(WHITE)) | tab(0)) ==
				("list" | "l") then {
				listprog()
			}

                #########################################

                 else if (tab(upto(WHITE)) | tab(0)) ==
				("scene01" | "l") then {
				listprog01()
			}
                 else if (tab(upto(WHITE)) | tab(0)) ==
				("scene02" | "l") then {
				listprog02()
			}
                 else if (tab(upto(WHITE)) | tab(0)) ==
				("scene03" | "l") then {
				listprog03()
			}
                 else if (tab(upto(WHITE)) | tab(0)) ==
				("scene04" | "l") then {
				listprog04()
			}
                 else if (tab(upto(WHITE)) | tab(0)) ==
				("scene05" | "l") then {
				listprog05()
			}
                 else if (tab(upto(WHITE)) | tab(0)) ==
				("scene06" | "l") then {
				listprog06()
			}
                 else if (tab(upto(WHITE)) | tab(0)) ==
				("scene07" | "l") then {
				listprog07()
			}
                 else if (tab(upto(WHITE)) | tab(0)) ==
				("scene08" | "l") then {
				listprog08()
			}
                 else if (tab(upto(WHITE)) | tab(0)) ==
				("scene09" | "l") then {
				listprog09()
			}
                 else if (tab(upto(WHITE)) | tab(0)) ==
				("scene10" | "l") then {
				listprog10()
			}


                #########################################

			else if (tab(upto(WHITE)) | tab(0)) ==
				("execute" | "e") then {
				execprog()
			}

			else if (tab(upto(WHITE)) | tab(0)) ==
				("help" | "h" | "?") then {
				helpprog()
                 }

			else if (tab(upto(WHITE)) | tab(0)) ==
				("commands" | "c" | "!") then {
				commandlist()
			}

			else if (tab(upto(WHITE)) | tab(0)) ==
				("quit" | "q") then {
				quitprog()
			}

			else {
			       	write("Syntax Error: ",line)
				helpprog()
			}
		   }

		writes("Input> ")
               
	}

end

procedure execprog()
   local runargs, out, prog, line, command

	static	tmpfile

	initial tmpfile := "TMPFILE.icn"

	runargs := tab(0)

	(out := open(tmpfile,"w")) |

	(write("I can't open '",tmpfile,"' for writing") & fail)

	prog := sort(PRTBL)

	every line := !prog do {
		write(out,line[2])
	}
	close(out)

     command := "wicont -s " || tmpfile || " -x " || runargs

	command ||:= " ; rm -f " || tmpfile

	system(command)
 
end

procedure seqprog()
   local begno, incno, prog, lno, l

	begno := incno := 10

	tab(many(WHITE))

	begno := numeric(tab(many(&digits)))

	tab(many(WHITE))

	incno := numeric(tab(many(&digits)))

	prog := sort(PRTBL)

	PRTBL := table()

	lno := begno
	every l := !prog do {
		PRTBL[lno] := l[2]
		lno +:= incno
	}

end

procedure readprog()
   local readfile, response, in, lno, line

	tab(many(WHITE))
	readfile := tab(upto(WHITE) | 0)

	if /readfile | *readfile = 0 then {
		writes("Read file name: ")
		readfile := read()
	}

	if MFLAG > 0 then {
		writes("Write before reading over current program? ")
		response := read()
		if any('yY',response) then
			writeprog()
	}

	PRTBL := table()

	in := open(readfile,"r")
	lno := 1
	every line := !in do {
		PRTBL[lno] := line
		lno +:= 1
	}
	close(in)

	write("Read '",readfile,"'...",*PRTBL," lines")

end

procedure writeprog()
   local writefile, prog, out, l

	tab(many(WHITE))
	writefile := tab(upto(WHITE) | 0)

	if /writefile | *writefile = 0 then {
		writes("Write file name: ")
		writefile := read()
	}

	prog := sort(PRTBL)

	out := open(writefile,"w")
	every l := !prog do {
		write(out,l[2])
	}
	close(out)

	write("Write '",writefile,"'...",*PRTBL," lines")

end

procedure delprog()
   local begno, endno, prog, l, lno

	begno := 0
	endno := 99999

	tab(many(WHITE))

	begno := endno := numeric(tab(many(&digits)))

	tab(many(WHITE))

	endno := numeric(tab(many(&digits)))

	prog := sort(PRTBL)

	PRTBL := table()

	every l := !prog do {
		lno := numeric(l[1])
		if (lno < begno) | (lno > endno) then PRTBL[lno] := l[2]
	}

end

procedure listprog()
   local begno, endno, prog, l, lno

	begno := 0
	endno := 99999

	tab(many(WHITE))

	begno := endno := numeric(tab(many(&digits)))

	tab(many(WHITE))

	endno := numeric(tab(many(&digits)))

	prog := sort(PRTBL)

	every l := !prog do {
		lno := numeric(l[1])
		if (lno >= begno) & (lno <= endno) then
			write(right(lno,5),": ",l[2])
		if lno > endno then break
	}

end
###################################################

procedure listprog01()
   local begno, endno, prog, l, lno

	begno := 1572
	endno := 1606

	tab(many(WHITE))

	begno := endno := numeric(tab(many(&digits)))

	tab(many(WHITE))

	endno := numeric(tab(many(&digits)))

	prog := sort(PRTBL)

	every l := !prog do {
		lno := numeric(l[1])
		if (lno >= begno) & (lno <= endno) then
			write(right(lno,5),": ",l[2])
		if lno > endno then break
	}

end

procedure listprog02()
   local begno, endno, prog, l, lno

	begno := 1610
	endno := 1623

	tab(many(WHITE))

	begno := endno := numeric(tab(many(&digits)))

	tab(many(WHITE))

	endno := numeric(tab(many(&digits)))

	prog := sort(PRTBL)

	every l := !prog do {
		lno := numeric(l[1])
		if (lno >= begno) & (lno <= endno) then
			write(right(lno,5),": ",l[2])
		if lno > endno then break
	}

end

procedure listprog03()
   local begno, endno, prog, l, lno

	begno := 1578
	endno := 1609

	tab(many(WHITE))

	begno := endno := numeric(tab(many(&digits)))

	tab(many(WHITE))

	endno := numeric(tab(many(&digits)))

	prog := sort(PRTBL)

	every l := !prog do {
		lno := numeric(l[1])
		if (lno >= begno) & (lno <= endno) then
			write(right(lno,5),": ",l[2])
		if lno > endno then break
	}

end

procedure listprog04()
   local begno, endno, prog, l, lno

	begno := 1613
	endno := 1622

	tab(many(WHITE))

	begno := endno := numeric(tab(many(&digits)))

	tab(many(WHITE))

	endno := numeric(tab(many(&digits)))

	prog := sort(PRTBL)

	every l := !prog do {
		lno := numeric(l[1])
		if (lno >= begno) & (lno <= endno) then
			write(right(lno,5),": ",l[2])
		if lno > endno then break
	}

end

procedure listprog05()
   local begno, endno, prog, l, lno

	begno := 1646
	endno := 1653

	tab(many(WHITE))

	begno := endno := numeric(tab(many(&digits)))

	tab(many(WHITE))

	endno := numeric(tab(many(&digits)))

	prog := sort(PRTBL)

	every l := !prog do {
		lno := numeric(l[1])
		if (lno >= begno) & (lno <= endno) then
			write(right(lno,5),": ",l[2])
		if lno > endno then break
	}

end

procedure listprog06()
   local begno, endno, prog, l, lno

	begno := 1657
	endno := 1669

	tab(many(WHITE))

	begno := endno := numeric(tab(many(&digits)))

	tab(many(WHITE))

	endno := numeric(tab(many(&digits)))

	prog := sort(PRTBL)

	every l := !prog do {
		lno := numeric(l[1])
		if (lno >= begno) & (lno <= endno) then
			write(right(lno,5),": ",l[2])
		if lno > endno then break
	}

end

procedure listprog07()
   local begno, endno, prog, l, lno

	begno := 1675
	endno := 1698

	tab(many(WHITE))

	begno := endno := numeric(tab(many(&digits)))

	tab(many(WHITE))

	endno := numeric(tab(many(&digits)))

	prog := sort(PRTBL)

	every l := !prog do {
		lno := numeric(l[1])
		if (lno >= begno) & (lno <= endno) then
			write(right(lno,5),": ",l[2])
		if lno > endno then break
	}

end

procedure listprog08()
   local begno, endno, prog, l, lno

	begno := 1702
	endno := 1725

	tab(many(WHITE))

	begno := endno := numeric(tab(many(&digits)))

	tab(many(WHITE))

	endno := numeric(tab(many(&digits)))

	prog := sort(PRTBL)

	every l := !prog do {
		lno := numeric(l[1])
		if (lno >= begno) & (lno <= endno) then
			write(right(lno,5),": ",l[2])
		if lno > endno then break
	}

end

procedure listprog09()
   local begno, endno, prog, l, lno

	begno := 1729
	endno := 1746

	tab(many(WHITE))

	begno := endno := numeric(tab(many(&digits)))

	tab(many(WHITE))

	endno := numeric(tab(many(&digits)))

	prog := sort(PRTBL)

	every l := !prog do {
		lno := numeric(l[1])
		if (lno >= begno) & (lno <= endno) then
			write(right(lno,5),": ",l[2])
		if lno > endno then break
	}

end

procedure listprog10()
   local begno, endno, prog, l, lno

	begno := 1750
	endno := 1757

	tab(many(WHITE))

	begno := endno := numeric(tab(many(&digits)))

	tab(many(WHITE))

	endno := numeric(tab(many(&digits)))

	prog := sort(PRTBL)

	every l := !prog do {
		lno := numeric(l[1])
		if (lno >= begno) & (lno <= endno) then
			write(right(lno,5),": ",l[2])
		if lno > endno then break
	}

end

#######################################################

procedure helpprog()

	static helpmsg

	initial {
		helpmsg := [
		"<<< Icon-based Expression Syntax >>>",
		"",
		"lineno expression",
		"",
		"<<< Command Summary >>>",
		" (1st character works)",
		"",
		"read [ file ]",
		"write [ file ]",
		"list [ begno [ endno ] ]",
		"delete [ begno [ endno ] ]",
		"sequence [ begno [ increment ] ]",
		"execute [ args ]",
		"quit",
		"help"
		]
	}

	every write(!helpmsg)

end

procedure quitprog()
   local response

	if MFLAG > 0 then {
		writes("Write before quitting? ")
		response := read()
		if any('yY',response) then
			writeprog()
	}

	stop("Goodbye.")

end

######################################################
######################################################

#begin scenes

procedure scene01()

i := 15

   size := 10
   radius := size / .8
   xc := yc := size / .8

   angle := 0.0
   incr := 2 * &pi / i

   every j := 1 to i do {
      spokes(xc + radius * cos(angle), yc + radius * sin(angle),
      radius, i, angle)
      angle +:= incr
      }
 
end

procedure spokes(x, y, r, i, angle)
   local incr, j

   incr := 2 * &pi / i 
  Fg("red")
   every j := 1 to i do {
DrawCube(x + r * cos(angle),y + r * sin(angle), 0, .5)

      angle +:= incr
      }

   return

#radii..use x,y,r
   
end

###################################################

procedure scene02()

v:=[0,0.5,1,1.5,2,2.5,3,3.5,4]

vv:=[?0,?0.5,?1,?1.5,?2,?2.5,?3,?3.5,?4]

Fg(rgb)
every x := !v do
every z := !v do
every y := !vv do

DrawCube(x,y,z,s)

#horizontal stacks-specify color and size

end

#######################################################

procedure scene03()

Fg("blue")

va:=[[0,0.5,1,1.5,2,2.5,3,3.5,4],[0,0.5,1,1.5,2,2.5,3,3.5,4]]

every xx := !va[2] do
every zz := !va[2] do

DrawCube(xx,.5,zz,.1)

#flat plane-matrice

end

#######################################################

procedure scene04()

voxBase(0,.1,0,0.5,1,1.5,2,-2,.5)
voxBase(1,.1,0,0.5,1,1.5,2,-3,.5)
voxBase(1,.1,0,0.5,1,1.5,2,-4,.5)
voxBase(1,.1,0,0.5,1,1.5,2,-5,.5)
voxBase(1,.1,0,0.5,1,1.5,2,-6,.5)
voxBase(1,.1,0,0.5,1,1.5,2,-7,.5)

end

procedure voxBase(yy,ss,x1,x2,x3,x4,x5,x6)

v:=[x1,x2,x3,x4,x5,x6]

every x := !v do
every z := !v do

y := yy 
s := ss

Fg("blue")

DrawCube(x,y,z,s)

#line of cubes-matrice

end

#######################################################

procedure scene05()

Fg(rgb)

(wq := 80,oq := 4,sq := .5,zq := 0)

width := wq 
offset := oq 

every y := 0 to width - 1 do
every x := 0 to width - 1 do
        
if iand(x, y) = 0 then DrawCube(x * offset, zq,y * offset,sq)

#sierpinski

end

##########################################################

procedure scene06()

v:=[0,0.5,1,1.5,2,2.5,3,1]

vv:=[1,2,3,4,5,6,7,8]

vvv := [2,4,6,8,0]

   wsize := 25
   cmax  := 90
 
 every x := 0 to !v -1 do
   every y  := 0 to !vv -1 do
    every z  := 0 to !vvv -1 do {
         
Fg("65000,1,1")
         DrawCube(x,?y,z,.5)

}

#cube vertical stacks

end

####################################################

procedure scene07()


v:=[0,0.5,1,1.5,2,2.5,3,1]

vv:=[1,2,3,4]

Fg("blue")
every x := !v  do
every y := !v do
every xx := !vv do
#every yy := !vvv do

DrawCube(x,1,1,.5)
DrawCube(x,2,1,.5)
DrawCube(x,3,1,.5)

#single vertical stack

end

##########################################################

procedure scene08()

colors:= ["red", "blue", "green","yellow", "purple", "white", "black"]
 
w := 3
h := 3
s:= .5
x:= 2-w/2 
y:= 4-h/2 

every z := 1 to 10 do {

Fg(?colors) 
DrawCube(x,y,z,s)

}

#colored row

end

##########################################################

procedure scene09()

every z := 1 to 100 do {
every x := 1 to 100 do {
inpglcube01(x,(y := ?x/&pi),z,1,"blue")

}
}

#vox mesh

end

###############################################################

procedure scene10()

colors:= ["red", "blue", "green","yellow", "purple", "white", "black"]
 
w := 3
h := 3
s:= .5
x:= 2-w/2 
y:= 4-h/2 

every z := 1 to 10 do {
every x := 1 to 10 do {

Fg(?colors) 
DrawCube(x,(y := ?x/&pi),z,s)

}
}

#colored mesh

end

################################################################

procedure comlist01()

#WAttrib("light0=diffuse white; ambient black; specular white; position 0.0, 1.0, 0.0")

#Fg("diffuse light grey; ambient grey; specular black; emission black; shininess 50")

#inpglcube01()#xyzsc
#inpglsphere01()#xyzsc
#inpglcylinder01()#xyzstbc
#inpglplane01()#xyzxyzxyzxyzc
#seteye()#px,py,pz,dx,dy,dz,qx,qy,qz
#psplane01()#c
#texcube01()#xyzs tex
#texcylinder01()#xyzstb tex
#texplane01()#tex
#texskysphere02()#tex
#texskysphere01()#tex
#texgroundplane01()#tex
#texskyplane01()#tex
#tmod01()#xdd,v01,v02,v03,v04,v05,v06,v07,v08,v09,v10,v11,v12,v13,v14,v15,cc,dd,ee,ff,zed
#scenes 01-10#

end

##END OF PROGRAM################################################

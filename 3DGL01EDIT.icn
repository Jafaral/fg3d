
#______________ 2016 FratisGraphics

#Program to utilize Unicons 3D capabilities.

#Some of this code is from the University of Arizona and Rosetta Code.
#Please contact me if you would like specifics of this.
#shawnfratis@gmail.com

#Made in Unicon, with Unicon IDE
#unicon.sourceforge.net

#NOTE: paths to textures, images etc. must be created as needed within the code(for now).

###############################

link wopen
link color
link graphics
link numbers
link options
link button 
link strings
link colrlist
link interact
link random
link printf

################################

procedure main()

&window := open("3DGL01", "gl", "size=1000,700", "bg=black") | stop("can't even open window, bro")

Fg("green")

WWrite("Welcome to _____. Press ? for basic instruction screen")
WWrite("< gives more in-depth instructions. > and : are reference guides")

###############################
      
        repeat {

w := Active() | stop("Active fails")

################################

#not presently used - can be modified to introduce extra mouse events.
   
       case e := Event(w) of {

&lpress | &mpress | &rpress: {
	      x1 := &x
	      y1 := &y
	      x2 := y2 := &null
}

################################
#begin basic keyboard commands.
#Image paths currently set for Windows.
#You will have to modify it for other platforms or locations. 

"\z": {
	 
              WriteImage("C:/Users/meridith/Desktop/fg01.png")#change as needed
             }
"\s": { 
              texskysphere02()

              }
"\p": { 
              texskysphere01()

              }
"\q":{
              texskyplane01()#test

              }
"\$": {      
              texgroundplane01()#test

              }
"\g": {
              WAttrib("eyepos=0.0,0.0,5.0","eyedir=0.0,0.0,1.0")

              }
"\h": {
              WAttrib("eyepos=2.0,0.0,5.0","eyedir=0.0,0.0,1.0")
       
              }
"\j": { 
              WAttrib("eyepos=4.0,0.0,5.0","eyedir=0.0,0.0,1.0")
    
              }
"\k": {
	         WAttrib("eyepos=0.0,0.0,5.0","eyedir=0.0,0.0,1.0")
    
              }
"\a": {
	         WAttrib("eyepos=0.0,2.0,8.0","eyedir=-0.0,0.0,1.0")
    
              }
"\G": {
               WAttrib("eyepos=0.0,0.0,5.0","eyedir=0.0,0.0,1.0")
               #Eye(0,.2,0, 0,0,-1, 0,1,0)
              
              }
"\H": {
               WAttrib("eyepos=-2.0,0.0,5.0","eyedir=0.0,0.0,1.0")

              }
"\J": {
               WAttrib("eyepos=-4.0,0.0,5.0","eyedir=0.0,0.0,1.0")

              }
"\S": {
               WAttrib("eyepos=0.0,0.0,5.0","eyedir=0.0,0.0,1.0")

              }
"\%": {    
              Refresh()

              }
"\[": {    
             #voxgrid01()#input
             #voxgrid02()
             #voxgrid03()
             #voxgrid04()         
             #voxgrid05()#input
             #voxgrid06()
             #voxgrid07()
             #voxgrid08()
             #voxgrid09()
             #voxgrid10()
             #voxgrid11()
             #voxgrid12()
             #voxgrid13()
             voxgrid14()
             
             }

"\]": {       
              inpgleye01()

              }
"\\": {  
              EraseArea()

              }
"\@": {
              exit()

              }

"\/": {      
              inputprompt()

              }
"\,": { 
              trimesh01()

              }
"\?": {  
              helpbox1()

              }
"\:": { 
              helpbox4()

              } 
"\<": { 
              helpbox2()

              } 
"\=": { 
              helpbox5()

              }
"\>": { 
              helpbox3()

	}
    }
  }

WDone()

end

#########################################################

procedure helpbox1()

win1 := WOpen("size=800, 200", "fg=yellow", "bg=black")

WWrite(win1,"To come back to these instructions press ?")
WWrite(win1,"< gives more in-depth instructions. >,= and : are reference guides")
WWrite(win1,"Generating an example cube:") 
WWrite(win1,"Press / to start command line. Type cube, then enter.")
WWrite(win1,"Type 0, enter. Type 0.5, enter. Type -2, enter. Type .5, enter.") 
WWrite(win1,"Finally, type 60000,10000,10000 then enter.")  
WWrite(win1,"This will create a red colored cube in the center of the screen.")
WWrite(win1,"These numbers are the X, Y, Z, size and color values of the cube.")  
WWrite(win1,"These vals set objects at XYZ=0:")
WWrite(win1,"cube 0,0,0,.5,10000,10000,20000")
WWrite(win1,"sphere 0,0,0,.5,20000,10000,10000")
WWrite(win1,"cyl 0,0,0,1,.5,.5,10000,20000,10000")
WWrite(win1,"After entering object, use views to refresh screen")

end

################################################

procedure helpbox3()

win1 := WOpen("size=800, 200", "fg=yellow", "bg=black")

 #WAttrib("dx=1", "dy=1")
WWrite(win1,"           [+y]               ")
        WWrite(win1,"            |                    ")
        WWrite(win1,"            |                 ")	 
        WWrite(win1,"            |                   cam = position,direction,up : 0,0,5,0,0,1,0,1,0")
        WWrite(win1,"            |                   g hH jJ a k s change views.")
        WWrite(win1,"[-x]--------0-------[+x]  ] is for a basic mouse navigation.")
        WWrite(win1,"            |                   forward  0,0,5,0,0,1,0,1,0")
        WWrite(win1,"            |                   angle up 0,2,8,0,0,1,0,1,0 ")
        WWrite(win1,"            |                   angle side 4,0,5,0,0,1,0,1,0")                              
        WWrite(win1,"            |                    ")
        WWrite(win1,"           [-y]              ")

end

procedure helpbox2()

win1 := WOpen("size=800, 200", "fg=yellow", "bg=black")

WWrite(win1,"/ is input prompt, \ is erase all")
WWrite(win1,"cube=x,y,z,color") 
WWrite(win1,"cyl=x,y,z,h,r1,r2,color") 
WWrite(win1,"sphere=x,y,z,r,color")
WWrite(win1,"plane=x,y,z of 4 corners,color")
WWrite(win1,"Some example values:")
WWrite(win1,"cyl(0_-1_-4_1_.5_.5_12000,65000,10000)")
WWrite(win1,"sphere(0_0.1_-3_.5_65000,1000,1000)")
WWrite(win1,"cube(0_0.5_-2_.5_1000,2000,65000)")
WWrite(win1,"rcube01 = random displacement")
WWrite(win1,"Preset pos:cubecenter,cuberight,cubeleft,cubecenterlow")
WWrite(win1,"randomcubecenter,randomcuberight, etc.")

end

procedure helpbox4()

win1 := WOpen("size=800, 200", "fg=yellow", "bg=black")

WWrite(win1,"Color (RGB) values must be entered in this format: 65000,65000,65000")
WWrite(win1,"Here are some examples for different shades of red:")
WWrite(win1,"very light weak red     57343,51881,51881  medium strong red       57343,8191,8191")
WWrite(win1,"very light moderate red 60073,49151,49151  medium vivid red        65535,0,0")
WWrite(win1,"very light strong red   62804,46420,46420  dark weak red           27306,16383,16383")
WWrite(win1,"very light vivid red    65535,43689,43689  dark moderate red       32767,10922,10922")
WWrite(win1,"light weak red          49151,38228,38228  dark strong red         38228,5461,5461")
WWrite(win1,"light moderate red      54612,32767,32767  dark vivid red          43690,0,0")
WWrite(win1,"light strong red        60073,27306,27306  very dark weak red      13653,8191,8191")
WWrite(win1,"light vivid red         65535,21845,21845  very dark moderate red  16383,5461,5461")
WWrite(win1,"medium weak red         40959,24575,24575  very dark strong red    19114,2730,2730")
WWrite(win1,"medium moderate red     49151,16383,16383  very dark vivid red     21845,0,0")

end

procedure helpbox5()

win1 := WOpen("size=800, 200", "fg=yellow", "bg=black")

WWrite(win1,"p,q,$,s for texplanes")
WWrite(win1,"vox1 = 18,0,1,1,rgb")
WWrite(win1,"vox2 = x,?y,z,s,rgb")

end


########################################################

#straighten this up a bit

procedure textin01()

        WAttrib("dx=1", "dy=1")

        Fg("green")

        WWrite("annotation:")
        s := WRead()
        WWrite("note:",image(s))

end

########################################################

procedure inputCube01()

      s1 := WRead()
      s2 := WRead()
      s3 := WRead()
      s4 := WRead()
      s5 := WRead()
      
      ipx := s1
      ipy := s2
      ipz := s3
      ips := s4
      rgb := s5  
   
  inpglcube01(ipx,ipy,ipz,ips,rgb)

return()

end

################################################################

procedure inputSphere01()

      s1 := WRead()
      s2 := WRead()
      s3 := WRead()
      s4 := WRead()
      s5 := WRead()
      
      ipx := s1
      ipy := s2
      ipz := s3
      ips := s4
      rgb := s5  
   
  inpglsphere01(ipx,ipy,ipz,ips,rgb)

return()

end

########################################################

procedure inputCyl01()

      s1 := WRead()
      s2 := WRead()
      s3 := WRead()
      s4 := WRead()
      s5 := WRead()
      s6 := WRead()
      s7 := WRead()
      
      ipx := s1
      ipy := s2
      ipz := s3
      ips := s4 
      ipq := s5  
      ipa := s6
      rgb := s7   
   
  inpglcylinder01(ipx,ipy,ipz,ips,ipq,ipa,rgb)

return()

end

################################################################

procedure inputPlane01(px,py,pz,pxx,pyy,pzz,pxxx,pyyy,pzzz,pxxxx,pyyyy,pzzzz,rgb)


      s1 := WRead()
      s2 := WRead()
      s3 := WRead()
      s4 := WRead()
      s5 := WRead()
      s6 := WRead()
      s7 := WRead()
      s8 := WRead()
      s9 := WRead()
      s10 := WRead()
      s11 := WRead()
      s12 := WRead()
      s13 := WRead()
        
      px  := s1
      py  := s2
      pz  := s3
      pxx := s4
      pyy := s5 
      pzz := s6  
      pxxx := s7
      pyyy := s8
      pzzz := s9
      pxxxx := s10
      pyyyy := s11
      pzzzz := s12 
      pzrgb := s13          
   
  inpglplane01(px,py,pz,pxx,pyy,pzz,pxxx,pyyy,pzzz,pxxxx,pyyyy,pzzzz,pzrgb)

end

########################################################

procedure inputRCube01()

      s1 := WRead()
      s2 := WRead()
      s3 := WRead()
      s4 := WRead()
      
      ipx := s1
      ipy := s2
      ipz := s3
      ips := s4  
   
  inpRglcube01(ipx,ipy,ipz,ips)

end

#################################################

procedure seteyein()

      s1 := WRead()
      s2 := WRead()
      s3 := WRead()
      s4 := WRead()
      s5 := WRead()
      s6 := WRead()
      s7 := WRead()
      s8 := WRead()
      s9 := WRead()
      
      ipx := s1
      ipy := s2
      ipz := s3
      ips := s4 
      ipq := s5
      ipw := s6     
      ipb := s7
      ipu := s8
      ipt := s9
 
  seteye(ipx,ipy,ipz,ips,ipq,ipw,ipb,ipu,ipt)

end

#################################################

procedure voxin01()

      s1 := WRead()
      s2 := WRead()
      s3 := WRead()
      s4 := WRead()
      s5 := WRead()
            
      ipx := s1
      ipy := s2
      ipz := s3
      ips := s4 
      ipc := s5

voxgrid05(ipx,ipy,ipz,ips,ipc)

end

#################################################

procedure voxin02()

      s1 := WRead()
      s2 := WRead()
      s3 := WRead()
      s4 := WRead()
      s5 := WRead()
            
      ipx := s1
      ipy := s2
      ipz := s3
      ips := s4 
      ipc := s5

voxgrid01(ipx,ipy,ipz,ips,ipc)

end

#################################################

procedure inputprompt()
 
        s1 := WRead()

        #WAttrib("dx=1", "dy=1")

        ss1 :=( "cube")
        ss2 :=( "plane")
        ss3 :=( "cyl")
        ss4 :=( "sphere")
        ss5 :=( "cube02")
        ss6 :=( "plane02")
        ss7 :=( "cyl02")
        ss8 :=( "sphere02")
        ss9 :=( "rcube01")
        ss10 :=( "cubecenter")
        ss11 :=( "cuberight")
        ss12 :=( "cubeleft")
        ss13 :=( "cubecenterlow")
        ss14 :=( "randomcubecenter")
        ss15 :=( "randomcuberight")
        ss16 :=( "randomcubeleft")
        ss17 :=( "randomcubecenterlow")
        ss18 :=( "cam")
        ss19 :=( "vox1")
        ss20 :=( "vox2")
        ss21 :=( "notused")
        ss22 :=( "notused")
        ss23 :=( "notused")
      

        if s1== ss1 then inputCube01() 
        else
        if s1== ss2 then inputPlane01() 
        else
        if s1== ss3 then inputCyl01() 
        else
        if s1== ss4 then inputSphere01() 
        else
        if s1== ss5 then inputCube02() 
        else
        if s1== ss6 then inputPlane02() 
        else
        if s1== ss7 then inputCyl02() 
        else
        if s1== ss8 then inputSphere02() 
        else
        if s1== ss9  then inputRCube01()
        else
        if s1== ss10 then presetCube01()
        else
        if s1== ss11 then presetCube02()
        else
        if s1== ss12 then presetCube03()
        else
        if s1== ss13 then presetCube04()
        else
        if s1== ss14 then presetRCube01()
        else
        if s1== ss15 then presetRCube02()
        else
        if s1== ss16 then presetRCube03()
        else
        if s1== ss17 then presetRCube04()
        else
        if s1== ss18 then seteyein()
        else
        if s1== ss19 then voxin01()
        else
        if s1== ss20 then voxin02()
        else
        if s1== ss21 then notused 
        else
        if s1== ss22 then notused
        else
        if s1== ss23 then notused 
     

    return

end

#############end input cubes etc#################
##############Begin OpenGL 3D##############################
#FOR TESTING PURPOSES..DELETE LATER
#procedure f01()

#w := open("scene","gl", "bg=black", "size=100,100")

#WAttrib(w, "light0=diffuse white; ambient black; _
#specular white; position 0.0, 1.0, 0.0")
#WAttrib("light0=on, ambient white","fg=specular white")
#WAttrib("light0=on, ambient white,fg=specular white,position 0.0,-1,0.0")
#WAttrib("light0=on, ambient  white")
#WAttrib("light0=on, ambient blue-green","fg=specular white")
#DrawCylinder(w, 0.0, -0.2, -3.5, 0.75, 0.5, 0.0)
#DrawTorus(w,0.0, -0.2, -3.5, 0.3, 0.7)
#DrawSphere(w,0.0, 0.59, -2.2, 0.3)
#Fg("red")
#DrawCylinder(0,-1,-4,1,.5,.5)
#Fg("blue")
#DrawSphere(0,0.1,-3,.5)
#Fg("green")
#FillPolygon(-3,-1,-8,3,-1,-8,3,-1,5,-3,-1,5)

#Fg("yellow")
#DrawCube(0,0.5,-10,.5)

#Refresh()

#end

###########################################################

procedure seteye(px,py,pz,dx,dy,dz,qx,qy,qz)

Eye(px,py,pz,dx,dy,dz,qx,qy,qz)

end

##################################################

procedure inpglcube01(ipx,ipy,ipz,ips,rgb)

Fg(rgb)
DrawCube(ipx,ipy,ipz,ips)

end

##################################################

procedure inpglsphere01(ipx,ipy,ipz,ips,rgb)

Fg("rgb")
DrawSphere(ipx,ipy,ipz,ips)

end

##################################################

procedure inpglcylinder01(ipx,ipy,ipz,ips,ipq,ipa)

Fg("rgb")
DrawCylinder(ipx,ipy,ipz,ips,ipq,ipa)

end

##################################################

procedure inpglplane01(px,py,pz,pxx,pyy,pzz,pxxx,pyyy,pzzz,pxxxx,pyyyy,pzzzz,pzrgb)

Fg("pzrgb")
FillPolygon(px,py,pz,pxx,pyy,pzz,pxxx,pyyy,pzzz,pxxxx,pyyyy,pzzzz)

end

##################################################

procedure inpgleye01()

repeat {

case Event() of {
&ldrag:{

Eye(&x,&y,&y,0 ,0,-1, 0,1,0)

}
	  "\e": break{
    #  }

}
}
}

#return()
   
end

#####################################################

procedure inpRglcube01(ipx,ipy,ipz,ips)

Fg("red")
DrawCube(ipx + ?0.01,ipy + ?0.01,ipz + ?0.01,ips)

Fg("red")
DrawCube(ipx + ?0.01,ipy + ?0.01,ipz + ?0.01,ips)

Fg("red")
DrawCube(ipx + ?0.01,ipy + ?0.01,ipz + ?0.01,ips)

Fg("red")
DrawCube(ipx + ?0.01,ipy + ?0.01,ipz + ?0.01,ips)

end

##############################################################

#start preset cubes

procedure presetCube01()
   
  inpglcube01(0,0.5,-2,.5)

end

##############################################################

procedure presetCube02()
   
  inpglcube01(1,0.5,-2,.5)

end

##############################################################

procedure presetCube03()
   
  inpglcube01(-1,0.5,-2,.5)

end

##############################################################

procedure presetCube04()
   
  inpglcube01(0,0.1,-2,.5)

end

###############################################

procedure presetRCube01()
   
  inpRglcube01(0,0.5,-2,.5)

end

###############################################

procedure presetRCube02()
   
  inpRglcube01(1,0.5,-2,.5)

end

###############################################

procedure presetRCube03()
   
  inpRglcube01(-1,0.5,-2,.5)

end

###############################################

procedure presetRCube04()
   
  inpRglcube01(0,0.1,-2,.5)

end


########################################################

procedure presetSphere01()
    
  inpglsphere01(ipx,ipy,ipz,ips)

end

########################################################

procedure presetCyl01()
   
  inpglcylinder01(ipx,ipy,ipz,ips,ipq,ipa)

end

################################################################

procedure 

presetPlane01(px,py,pz,pxx,pyy,pzz,pxxx,pyyy,pzzz,pxxxx,pyyyy,pzzzz)

end

########################################################

procedure presetSphere02()
   
  inpglsphere02(ipx,ipy,ipz,ips)

end

########################################################

procedure presetrCube02()
   
  inpglcube02(ipx,ipy,ipz,ips)

end

################################################################

procedure presetCyl02()
   
  inpglcylinder02(ipx,ipy,ipz,ips,ipq,ipa)

end

################################################################

procedure 

presetPlane02(px,py,pz,pxx,pyy,pzz,pxxx,pyyy,pzzz,pxxxx,pyyyy,pzzzz)        
 
end

##########################################################
#BEGIN MESH ELEMENTS
##########################################################

procedure tmod01(xdd,v01,v02,v03,v04,v05,v06,v07,v08,v09,v10,v11,v12,v13,v14,v15,cc,dd,ee,ff,zed)

(zq1 := -5+zed,zq2 := -4.5+zed, zq3 := -4+zed)

duk := cc
dad := dd
daq := ee
daz := ff

######################################################

(ya1 := -1+v01,ya2 := -1+v02,ya3 := -1+v03,ya4 := -1+v04,ya5 := -1+v05,ya6 := -1+v06,ya7 := -1+v07,ya8 := -1+v08,ya9 := -1+v09,yn1 := -1+v10,yn2 := -1+v11,yn3 := -1+v12,yn4 := -1+v13,yn5 := -1+v14,yn6 := -1+v15)

######################################################

(xa1 := 0+xdd,xa2 := .5+xdd,xa3 := 1+xdd,xa4 := 1.5+xdd,xa5 := 2+xdd,xa6 := 0+xdd,xa7 := .5+xdd,xa8 := 1+xdd,xa9 := 1.5+xdd,x10 := 2+xdd,x11 := 0+xdd,x12 := .5+xdd,x13 := 1+xdd,x14 := 1.5+xdd,x15 := 2+xdd)

##############

xq1 := xa1 
xq2 := xa2  
xq3 := xa3 
 
xq4 := xa4  
xq5 := xa5 
xq6 := xa6 
 
xq7 := xa7  
xq8 := xa8  
xq9 := xa9
 
xm1 := x10  
xm2 := x11 
xm3 := x12 

xm4 := x13 
xm5 := x14  
xm6 := x15

##############################################

yq1 := ya1 
yq2 := ya2  
yq3 := ya3 
 
yq4 := ya4 
yq5 := ya5 
yq6 := ya6 
 
yq7 := ya7 
yq8 := ya8 
yq9 := ya9 
 
ym1 := yn1  
ym2 := yn2
ym3 := yn3 

ym4 := yn4 
ym5 := yn5  
ym6 := yn6 

######################################################

Fg(duk)
#1
 FillPolygon(xq1,yq1,zq1,xq2,yq2,zq1,xq6,yq6,zq2)

Fg(daq)
#2  
 FillPolygon(xq2,yq2,zq1,xq7,yq7,zq2,xq6,yq6,zq2)

Fg(daz)
#3  
 FillPolygon(xq2,yq2,zq1,xq3,yq3,zq1,xq7,yq7,zq2)

Fg(dad)
#4  
 FillPolygon(xq3,yq3,zq1,xq8,yq8,zq2,xq7,yq7,zq2)

Fg(duk)
#5
 FillPolygon(xq3,yq3,zq1,xq4,yq4,zq1,xq8,yq8,zq2)

Fg(daq)
#6  
 FillPolygon(xq4,yq4,zq1,xq9,yq9,zq2,xq8,yq8,zq2)

Fg(daz)
#7
 FillPolygon(xq4,yq4,zq1,xq5,yq5,zq1,xq9,yq9,zq2)

Fg(dad)
#8  
 FillPolygon(xq5,yq5,zq1,xm1,ym1,zq2,xq9,yq9,zq2)

######################################################

Fg(duk)
#9  
 FillPolygon(xq6,yq6,zq2,xq7,yq7,zq2,xm2,ym2,zq3)

Fg(daq)
#10  
 FillPolygon(xq7,yq7,zq2,xm3,ym3,zq3,xm2,ym2,zq3)

Fg(daz)
#11
 FillPolygon(xq7,yq7,zq2,xq8,yq8,zq2,xm3,ym3,zq3)

Fg(dad)
#12  
 FillPolygon(xq8,yq8,zq2,xm4,ym4,zq3,xm3,ym3,zq3)

Fg(duk)
#13
 FillPolygon(xq8,yq8,zq2,xq9,yq9,zq2,xm4,ym4,zq3)

Fg(daq)
#14  
 FillPolygon(xq9,yq9,zq2,xm5,ym5,zq3,xm4,ym4,zq3)

Fg(daz)
#15  
 FillPolygon(xq9,yq9,zq2,xm1,ym1,zq2,xm5,ym5,zq3)

Fg(dad)
#16  
 FillPolygon(xm1,ym1,zq2,xm6,ym6,zq3,xm5,ym5,zq3)
 
end

############################################################

#add ? for params

procedure trimesh01()

(ha01 := -.1,ha02 := -.2,ha03 := -.1,ha04 := -.2,ha05 := -.1,ha06 := -.2,ha07 := -.1,ha08 := -.2,ha09 := -.1,ha10 := -.2,ha11 := -.1,ha12 := -.2,ha13 := -.1,ha14 := -.2,ha15 := -.1,ha16 := -.2,ha17 := -.1)

(hb01 := -.2,hb02 := -.1,hb03 := -.2,hb04 := -.1,hb05 := -.2,hb06 := -.1,hb07 := -.2,hb08 := -.1,hb09 := -.2,hb10 := -.1,hb11 := -.2,hb12 := -.1,hb13 := -.2,hb14 := -.1,hb15 := -.2,hb16 := -.1,hb17 := -.2)

(qa01 := -.1,qa02 := -.2,qa03 := -.1,qa04 := -.2,qa05 := -.1,qa06 := -.2,qa07 := -.1,qa08 := -.2,qa09 := -.1,qa10 := -.2,qa11 := -.1,qa12 := -.2,qa13 := -.1,qa14 := -.2,qa15 := -.1,qa16 := -.2,qa17 := -.1)

(he01 := -.2,he02 := -.1,he03 := -.2,he04 := -.1,he05 := -.2,he06 := -.1,he07 := -.2,he08 := -.1,he09 := -.2,he10 := -.1,he11 := -.2,he12 := -.1,he13 := -.2,he14 := -.1,he15 := -.2,he16 := -.1,he17 := -.2)

(qb01 := -.1,qb02 := -.2,qb03 := -.1,qb04 := -.2,qb05 := -.1,qb06 := -.2,qb07 := -.1,qb08 := -.2,qb09 := -.1,qb10 := -.2,qb11 := -.1,qb12 := -.2,qb13 := -.1,qb14 := -.2,qb15 := -.1,qb16 := -.2,qb17 := -.1)

(hh01 := -.2,hh02 := -.1,hh03 := -.2,hh04 := -.1,hh05 := -.2,hh06 := -.1,hh07 := -.2,hh08 := -.1,hh09 := -.2,hh10 := -.1,hh11 := -.2,hh12 := -.1,hh13 := -.2,hh14 := -.1,hh15 := -.2,hh16 := -.1,hh17 := -.2)

(qc01 := -.1,qc02 := -.2,qc03 := -.1,qc04 := -.2,qc05 := -.1,qc06 := -.2,qc07 := -.1,qc08 := -.2,qc09 := -.1,qc10 := -.2,qc11 := -.1,qc12 := -.2,qc13 := -.1,qc14 := -.2,qc15 := -.1,qc16 := -.2,qc17 := -.1)

(hk01 := -.2,hk02 := -.1,hk03 := -.2,hk04 := -.1,hk05 := -.2,hk06 := -.1,hk07 := -.2,hk08 := -.1,hk09 := -.2,hk10 := -.1,hk11 := -.2,hk12 := -.1,hk13 := -.2,hk14 := -.1,hk15 := -.2,hk16 := -.1,hk17 := -.2)

(hl01 := -.1,hl02 := -.2,hl03 := -.1,hl04 := -.2,hl05 := -.1,hl06 := -.2,hl07 := -.1,hl08 := -.2,hl09 := -.1,hl10 := -.2,hl11 := -.1,hl12 := -.2,hl13 := -.1,hl14 := -.2,hl15 := -.1,hl16 := -.2,hl17 := -.1)

#####################################################

(s01:=.2,e01:=.2,e02:=.2,e03:=.2,s03:=.2,s05:=.2,e04:=.2,e05:=.2,e06:=.2,s06:=.2,s15:=.2,s16:=.2,s17:=.2,s18:=.2,s19:=.2)
(s03:=.2,e07:=.2,e08:=.2,e09:=.2,e10:=.2,s06:=.2,e11:=.2,e12:=.2,e13:=.2,e133:=.2,s19:=.2,s20:=.2,s21:=.2,s22:=.2,s23:=.2)
(e14:=.2,e15:=.2,e16:=.2,e17:=.2,s02:=.2,e18:=.2,e19:=.2,e20:=.2,e21:=.2,s05:=.2,s11:=.2,s12:=.2,s13:=.2,s14:=.2,s15:=.2)
(e22:=.2,e23:=.2,e24:=.2,e25:=.2,s01:=.2,e26:=.2,e27:=.2,e28:=.2,e29:=.2,s04:=.2,s07:=.2,s08:=.2,s09:=.2,s10:=.2,s11:=.2)                                    
(s07:=.2,s08:=.2,s09:=.2,s10:=.2,s11:=.2,e30:=.2,e31:=.2,e32:=.2,e33:=.2,s24:=.2,s27:=.2,s28:=.2,s29:=.2,s30:=.2,s31:=.2)
(s19:=.2,s20:=.2,s21:=.2,s22:=.2,s23:=.2,s26:=.2,e37:=.2,e38:=.2,e39:=.2,e399:=.2,s39:=.2,s40:=.2,s41:=.2,s42:=.2,s43:=.2)
(s11:=.2,s12:=.2,s13:=.2,s14:=.2,s15:=.2,s24:=.2,e34:=.2,e35:=.2,e36:=.2,s25:=.2,s31:=.2,s32:=.2,s33:=.2,s34:=.2,s35:=.2)
(s07:=.2,s08:=.2,s09:=.2,s10:=.2,s11:=.2,e40:=.2,e41:=.2,e42:=.2,e43:=.2,s24:=.2,s27:=.2,s28:=.2,s29:=.2,s30:=.2,s31:=.2)
(s35:=.2,s36:=.2,s37:=.2,s38:=.2,s39:=.2,s45:=.2,e51:=.2,e52:=.2,e53:=.2,s46:=.2,s55:=.2,s56:=.2,s57:=.2,s58:=.2,s59:=.2)
(s39:=.2,s40:=.2,s41:=.2,s42:=.2,s43:=.2,s46:=.2,e54:=.2,e55:=.2,e56:=.2,e566:=.2,s59:=.2,s60:=.2,s61:=.2,s62:=.2,s63:=.2)
(s27:=.2,s28:=.2,s29:=.2,s30:=.2,s31:=.2,e44:=.2,e45:=.2,e46:=.2,e47:=.2,s44:=.2,s47:=.2,s48:=.2,s49:=.2,s50:=.2,s51:=.2)
(s31:=.2,s32:=.2,s33:=.2,s34:=.2,s35:=.2,s44:=.2,e48:=.2,e49:=.2,e50:=.2,s45:=.2,s51:=.2,s52:=.2,s53:=.2,s54:=.2,s55:=.2)
(s55:=.2,s56:=.2,s57:=.2,s58:=.2,s59:=.2,s65:=.2,e71:=.2,e72:=.2,e73:=.2,s66:=.2,s68:=.2,e74:=.2,e75:=.2,e76:=.2,s69:=.2)
(s59:=.2,s60:=.2,s61:=.2,s62:=.2,s63:=.2,s66:=.2,e77:=.2,e78:=.2,e79:=.2,e80:=.2,e81:=.2,e82:=.2,e83:=.2,e84:=.2,s69:=.2)
(s47:=.2,s48:=.2,s49:=.2,s50:=.2,s51:=.2,e57:=.2,e58:=.2,e59:=.2,e60:=.2,s64:=.2,e61:=.2,e62:=.2,e63:=.2,e64:=.2,s67:=.2)
(s51:=.2,s52:=.2,s53:=.2,s54:=.2,s55:=.2,s64:=.2,e65:=.2,e66:=.2,e67:=.2,s65:=.2,s67:=.2,e68:=.2,e69:=.2,e70:=.2,s68:=.2)

######################################################

#group 1

#2nd
tmod01(0,s01,e01,e02,e03,s03,s05,e04,e05,e06,s06,s15,s16,s17,s18,s19,"green","red","yellow","orange",0)
#4th
tmod01(2,s03,e07,e08,e09,e10,s06,e11,e12,e13,e133,s19,s20,s21,s22,s23,"dark strong green","blue","medium weak green","purple",0)
#1st
tmod01(-2,e14,e15,e16,e17,s02,e18,e19,e20,e21,s05,s11,s12,s13,s14,s15,"medium weak red","magenta","dark moderate orange","cyan",0)
#3rd
tmod01(-4,e22,e23,e24,e25,s01,e26,e27,e28,e29,s04,s07,s08,s09,s10,s11,"dark strong blue","brown","medium weak red","2000,30000,2000",0)

#group 2   
                                     
#2nd
tmod01(0,s07,s08,s09,s10,s11,e30,e31,e32,e33,s24,s27,s28,s29,s30,s31,"green","red","yellow","orange",-1)
#4th
tmod01(2,s19,s20,s21,s22,s23,s26,e37,e38,e39,e399,s39,s40,s41,s42,s43,"dark strong green","blue","medium weak green","purple",-1)
#1st
tmod01(-2,s11,s12,s13,s14,s15,s24,e34,e35,e36,s25,s31,s32,s33,s34,s35,"medium weak red","magenta","dark moderate orange","cyan",-1)
#3rd
tmod01(-4,s07,s08,s09,s10,s11,e40,e41,e42,e43,s24,s27,s28,s29,s30,s31,"dark strong blue","brown","medium weak red","2000,30000,2000",-1)

#group 3

#2nd
tmod01(0,s35,s36,s37,s38,s39,s45,e51,e52,e53,s46,s55,s56,s57,s58,s59,"medium weak red","magenta","dark moderate orange","cyan",-2)
#4th
tmod01(2,s39,s40,s41,s42,s43,s46,e54,e55,e56,e566,s59,s60,s61,s62,s63,"dark strong blue","brown","medium weak red","2000,30000,2000",-2)
#3rd
tmod01(-4,s27,s28,s29,s30,s31,e44,e45,e46,e47,s44,s47,s48,s49,s50,s51,"green","red","yellow","orange",-2)
#1st
tmod01(-2,s31,s32,s33,s34,s35,s44,e48,e49,e50,s45,s51,s52,s53,s54,s55,"dark strong green","blue","medium weak green","purple",-2)

#group 4

#2nd
tmod01(0,s55,s56,s57,s58,s59,s65,e71,e72,e73,s66,s68,e74,e75,e76,s69,"medium weak red","magenta","dark moderate orange","cyan",-3)
#4th
tmod01(2,s59,s60,s61,s62,s63,s66,e77,e78,e79,e80,e81,e82,e83,e84,s69,"dark strong blue","brown","medium weak red","2000,30000,2000",-3)
#3rd
tmod01(-4,s47,s48,s49,s50,s51,e57,e58,e59,e60,s64,e61,e62,e63,e64,s67,"green","red","yellow","orange",-3)
#1st
tmod01(-2,s51,s52,s53,s54,s55,s64,e65,e66,e67,s65,s67,e68,e69,e70,s68,"dark strong green","blue","medium weak green","purple",-3)

end

##############Begin OpenGL 3D TEX##############################

procedure texcube01(ipx,ipy,ipz,ips)

WAttrib("texmode=on")

WAttrib("texture=C:/Users/meridith/Documents/dumdum/check.png")
#change as needed

DrawCube(ipx,ipy,ipz,ips)

WAttrib("texmode=off") 

end

##################################################

procedure texcylinder01(ipx,ipy,ipz,ips,ipq,ipa)

WAttrib("texmode=on")

WAttrib("texture=C:/Users/meridith/Documents/dumdum/check.png")#change as needed

DrawCylinder(ipx,ipy,ipz,ips,ipq,ipa)

WAttrib("texmode=off") 

end

##################################################

procedure texplane01(px,py,pz,pxx,pyy,pzz,pxxx,pyyy,pzzz,pxxxx,pyyyy,pzzzz)

WAttrib("texmode=on")

WAttrib("texture=C:/Users/meridith/Documents/dumdum/check.png","texcoord=0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0")#change as needed

FillPolygon(px,py,pz,pxx,pyy,pzz,pxxx,pyyy,pzzz,pxxxx,pyyyy,pzzzz)

end
##################################################

procedure texskysphere02()

WAttrib("texmode=on")

#WAttrib ("texture=C:/Users/meridith/Documents/dumdum/check.png","texcoord=0.0,1.0,0.0,0.0,1.0,0.0,.0.50,0.50")

WAttrib ("texture=C:/Users/meridith/Documents/dumdum/ssphere2.png")#change as needed

x := -1
y := 0
z := -5
r := 250

#Rotate(45,290,2,90)

#PushMatrix()

DrawSphere(x,y,z,r)

WAttrib("texmode=off") 

end

##################################################

procedure texskysphere01()

WAttrib("texmode=on")

#WAttrib ("texture=C:/Users/meridith/Documents/dumdum/check.png","texcoord=0.0,1.0,0.0,0.0,1.0,0.0,.0.50,0.50")

WAttrib ("texture=C:/Users/meridith/Documents/dumdum/ssphere.png")#change as needed

x := -1
y := 0
z := -5
r := 250

#Rotate(45,290,2,90)

#PushMatrix()

DrawSphere(x,y,z,r)

WAttrib("texmode=off") 

end

##################################################

procedure texgroundplane01()

WAttrib("texmode=on")

WAttrib("texture=C:/Users/meridith/Documents/dumdum/gplane.png","texcoord=0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0")#change as needed

FillPolygon(-129,-.5,-249,129,-.5,-249,129,-.5,100,-129,-.5,100)

WAttrib("texmode=off") 

end

##################################################

procedure texskyplane01()

WAttrib("texmode=on")

WAttrib("texture=C:/Users/meridith/Documents/dumdum/splane.png","texcoord=0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0")#change as needed

FillPolygon(-129,8,-249,129,8,-249,129,8,100,-129,8,100)

WAttrib("texmode=off") 

end

###############################################################
######begin voxel, etc grids###################################
#SOME EXPIREMENTAL

procedure voxgrid01(x,y,z,s,rgb)

v:=[0,0.5,1,1.5,2,2.5,3,3.5,4]

vv:=[?0,?0.5,?1,?1.5,?2,?2.5,?3,?3.5,?4]

Fg(rgb)
every x := !v do
every z := !v do
every y := !vv do

DrawCube(x,y,z,s)

end

#######################################################

procedure voxgrid02()

Fg("blue")

#v:=[0,0.5,1,1.5,2,2.5,3,3.5,4]
#vv:=[0,0.5,1,1.5,2,2.5,3,3.5,4]

#every x := !v do
#every y := !v do
#every z := !v do

#every xx := !v do
#every yy := !vv do
#every zz := !v do

#DrawCube(xx,0,zz,.1)
#DrawCube(xx,.5,zz,.1)

va:=[[0,0.5,1,1.5,2,2.5,3,3.5,4],[0,0.5,1,1.5,2,2.5,3,3.5,4]]

every x := !va[1] do
#every y := !v do
every z := !va[1] do

every xx := !va[2] do
#every yy := !vv do
every zz := !va[2] do

DrawCube(x,0,z,.1)
DrawCube(xx,.5,zz,.1)

end

#######################################################

procedure voxgrid03()

voxBase(0,.1,0,0.5,1,1.5,2,-2,.5)
voxBase(1,.1,0,0.5,1,1.5,2,-3,.5)
voxBase(1,.1,0,0.5,1,1.5,2,-4,.5)
voxBase(1,.1,0,0.5,1,1.5,2,-5,.5)
voxBase(1,.1,0,0.5,1,1.5,2,-6,.5)
voxBase(1,.1,0,0.5,1,1.5,2,-7,.5)

end

#######################################################

procedure voxBase(yy,ss,x1,x2,x3,x4,x5,x6)

v:=[x1,x2,x3,x4,x5,x6]

every x := !v do
every z := !v do

y := yy 
s := ss

Fg("blue")

DrawCube(x,y,z,s)

end

#######################################################

procedure voxgrid04()

voxgrid04master(18,1,0,1)
voxgrid04master(18,1,1,1)
voxgrid04master(18,1,2,1)
voxgrid04master(18,1,3,1)
voxgrid04master(14,1,4,1)
voxgrid04master(13,1,5,1)

end

#######################################################

procedure voxgrid05(x,y,z,s,c)

voxgrid04master(x,z,y,s,c)

end

#######################################################

procedure voxgrid04master(wq,oq,zq,sq,rgb)

Fg(rgb)

   width := wq #80
   offset := oq #5

   every y := 0 to width - 1 do
      every x := 0 to width - 1 do
        
   if iand(x, y) = 0 then DrawCube(x * offset, zq,y * offset,sq)

end

#########################################################

procedure voxgrid06()
   #local col, color, colorlist, cx, cy, cz, d0_x, d0_y, d0_z, d1_x
   #local d1_y, d1_z, d2_x, d2_y, d2_z, d3_x, d3_y, d3_z, dt, dt2
   #local i, old_col, old_row, old_y, row, sx, sy, sz, x, x_angle
   #local xt, y, y_angle, yt, z, z_angle, zt

   x_angle  :=  rtod(45)
   sx  :=  sin(x_angle)
   cx  :=  cos(x_angle)
   y_angle  :=  rtod(0)
   sy  :=  sin(y_angle)
   cy  :=  cos(y_angle)
   z_angle  :=  rtod(90)
   sz  :=  sin(z_angle)
   cz  :=  cos(z_angle)

     colorlist := ["red", "blue", "green", "magenta", "cyan", "yellow"]

   color := colorlist[1]

   x  :=  0.0
   y  :=  1.0
   z  :=  0.0
   old_col  :=  round(y * 9 + 320)
   old_row  :=  round(350 - 6.56 * z)
   dt  :=  0.01
   dt2  :=  dt / 2
   every i := 0 to 800 do {
      d0_x  :=  10 * (y-x) * dt2
      d0_y  :=  (-x * z + 28 * x - y) * dt2
      d0_z   :=  (x * y - 8 * z / 3) * dt2
      xt  :=  x + d0_x
      yt  :=  y + d0_y
      zt  :=  z + d0_z
      d1_x  :=  (10 * (yt-xt)) * dt2
      d1_y  :=  (-xt * zt + 28 * xt - yt) * dt2
      d1_z   := (xt * yt - 8 * zt / 3) * dt2
      xt  :=  x + d1_x
      yt  :=  y + d1_y
      zt  :=  z + d1_z
      d2_x  :=  (10 * (yt-xt)) * dt
      d2_y  :=  (-xt * zt + 28 * xt - yt) * dt
      d2_z   := (xt * yt - 8 * zt / 3) * dt
      xt  :=  x + d2_x
      yt  :=  y + d2_y
      zt  :=  z + d2_z
      d3_x  :=  (10 * (yt - xt)) * dt2
      d3_y  :=  (-xt * zt + 28 * xt - yt) * dt2
      d3_z  :=  (xt * yt - 8 * zt / 3) * dt2
                     old_y  :=  y
      x  :=  x + (d0_x + d1_x + d1_x + d2_x + d3_x) * 0.333333333
      y  :=  y + (d0_y + d1_y + d1_y + d2_y + d3_y) * 0.333333333
      z  :=  z +  (d0_z + d1_z + d1_z + d2_z + d3_z) * 0.333333333

      col  :=  round(y * 9 + 320)
      row  :=  round(350 - 6.56 * z)

      if col < 320 then
         if old_col >= 320 then {
            color := get(colorlist)
            put(colorlist, color)
            }
      else if col > 320 then
         if old_col <= 320 then {
            color := get(colorlist)
            put(colorlist, color)
            }

      Fg(color)
      DrawLine(old_col,old_row,1,col,row,1)
      old_row := row
      old_col := col
 
      }

   #Event()

end
##################################################################

procedure voxgrid07()
   #local extent, size, colors, ncolors, k, x, i, y, j, c, palette
   #local opts, init, incr, limit, run

   #opts := options(args, "gs+p:i+k+l+")

   palette := "c2"
   extent := 256
   init := 50
   incr := 1
   limit := (2 ^ 10)
   #run := opts["g"]

   size := extent / 2

    colors := colrplte(palette) | ExitNotice("Invalid palette.")
   ncolors := *colors

   every k := seq(init, incr) \ limit do {
      x := k
      every i := 0 to size do {
         y := x
         every j := i to size do {
            c := colors[?ncolors]
            Fg(c)
            DrawPoint(
               i, j, 1,
               j, i, 1,
               j, -i, 1,
               i, -j, 1,
               -i, -j, 1,
               -j, -i, 1,
               -j, i, 1,
               -i, j, 1,
               )
            y +:= k
            }
         x +:= k
         }
      Fg("black")
      if /run then repeat case Event() of {
         "q":   exit()
         "s":   snapshot()
         "n":   break
         }
      }

end

#######################################################

procedure voxgrid08()
#drawtree(400,500,-90,9)
drawtree(14,15,-9,9)
#WDone()
end
  
procedure drawtree(x,y,angle,depth)
if depth > 0 then {
   x2 := integer(x + cos(dtor(angle)) * depth * 10)
   y2 := integer(y + sin(dtor(angle)) * depth * 10)
   DrawLine(x,y,1,x2,y2,1)   
   drawtree(x2,y2,angle-20, depth-1)
   drawtree(x2,y2,angle+20, depth-1)
   }
return
end

################################################################
 
procedure voxgrid09(A)   #: XOR graphic
   wsize := 25
   cmax  := 90
   wparms := ["test","g",sprintf("size=%d,%d",wsize),"bg=black"]
   #&window := open!wparms | stop("Unable to open window")
 
   every y := 0 to wsize -1 do
      every x := 0 to wsize - 1 do {
         c := cmax/wsize * iand(wsize-1,ixor(x,y))
        # Fg(sprintf("%d,%d,%d",c,cmax-c,0))
#Fg("65000,1,1")
        # DrawCube(x,y,1,.5)
#Fg("350,40000,1")
        # DrawCube(x,y,3,.5)
#Fg("10,65000,1000")
        # DrawCube(x,y,5,.5)
#Fg("1,650,24000")
        # DrawCube(x,y,7,.5)
#Fg("1,30,65000")
        # DrawCube(x,y,9,.5)

#Fg("65000,1,1")
#         DrawCube(?x,?y,?1,.5)
#Fg("350,40000,1")
#        DrawCube(?x,?y,?3,.5)
#Fg("10,65000,1000")
#         DrawCube(?x,?y,?5,.5)
#Fg("1,650,24000")
#         DrawCube(?x,?y,?7,.5)
#Fg("1,30,65000")
#         DrawCube(?x,?y,?9,.5)

Fg("65000,1,1")
         DrawCube(?x,?y,1,1)
Fg("350,40000,1")
         DrawCube(?x,?y,2,1)
Fg("10,65000,1000")
         DrawCube(?x,?y,3,1)
Fg("1,650,24000")
         DrawCube(?x,?y,4,1)
Fg("1,30,65000")
         DrawCube(?x,?y,5,1)
         }
 
  end

##########################################################

procedure voxgrid10()

    i := 7

   size := 10
   radius := size / .8
   xc := yc := size / .8

   angle := 0.0
   incr := 2 * &pi / i

   every j := 1 to i do {
      spokes(xc + radius * cos(angle), yc + radius * sin(angle),
         radius, i, angle)
      angle +:= incr
      }

   #Event()

end

procedure spokes(x, y, r, i, angle)
   local incr, j

   incr := 2 * &pi / i 

   every j := 1 to i do {
     DrawLine(x, y, x,x + r * cos(angle), y + r * sin(angle),x)
     #DrawCube(x, y, x + r * cos(angle), y + r * sin(angle))
      angle +:= incr
      }

   return
   
end

###############################################################

#procedure voxgrid11(x,y,z,s,rgb)

procedure voxgrid11()

v:=[0,0.5,1,1.5,2,2.5,3,1]

vv:=[1,2,3,4,5,6,7,8]

vvv := [2,4,6,8,0]

#every y := !v do
#every z := !v do
#every x := !vv do

   wsize := 25
   cmax  := 90
 
 every x := 0 to !v -1 do
   every y  := 0 to !vv -1 do
    every z  := 0 to !vvv -1 do {
         #c := cmax/wsize * iand(wsize-1,ixor(x,y))
        # Fg(sprintf("%d,%d,%d",c,cmax-c,0))
Fg("65000,1,1")
         DrawCube(x,?y,z,.5)
#Fg("350,40000,1")
        # DrawCube(x,y,3,.5)

}

end

#procedure voxgrid12(x,y,z,s,rgb)
procedure voxgrid12()

#x := 0
#y := 0
s := .1

v:=[0,0.5,1,1.5,2,2.5,3,1]
#v := [[1,2,3],[1,2,3]]

vv:=[1,2,3,4]

#every y := !v[1] do
#every x := !v[2] do

Fg("blue")
every x := !v  do
every y := !v do
every xx := !vv do
#every yy := !vvv do

DrawCube(x,1,1,s)
DrawCube(x,2,1,s)
DrawCube(x,3,1,s)
end
#############################

procedure voxgrid13()

colors:= ["red", "blue", "green","yellow", "purple", "white", "black"] 

#Rect:=[FiIIRectangle, DrawRectangle] 
#Rect := [DrawCube]


#WOpen("size=" II Width II"," II Height) 

#repeat{ w:=?Width h:=?Height x:=?Width-w/2 Y:=?Height-h/2
#repeat{

w:=5
h:= 3 
x:=2-w/2 
y:= 4-h/2 

Fg(?colors) 
DrawCube(x,y,w,h)

 #WDelay(300) 
#WDone()
#}

end

#################################################################

procedure voxgrid14()

(xa:=1,xb:=5,xc:=9,xd:=13,xe:=17,xf:=21,xg:=25,xh:=29)

va:=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
vb:=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
vc:=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
vd:=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
ve:=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
vf:=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
vg:=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
vh:=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]

##########################################################

(xva:=2,xvb:=1,xvc:=.5)

(va[1] := xva+(va[2]+.5),va[2] := xvb+(va[3]+.5),va[3] := xvc+(va[4]+.5))

#####################################################################

(vza:=1,vzb:=2,vzc:=3,vzd:=4,vze:=5,vzf:=6,vzg:=7,vzh:=8)

(vqa:="blue",vqb:="blue",vqc:="blue",vqd:="blue",vqe:="blue",vqf:="blue",vqg:="blue",vqh:="blue",vqi:="blue",vqj:="blue",vqk:="blue",vql:="blue",vqm:="blue",vqn:="blue",vqo:="blue",vqp:="blue",vvqa:="blue",vvqb:="blue",vvqc:="blue",vvqd:="blue",vvqe:="blue",vvqf:="blue",vvqg:="blue",vvqh:="blue",vvqi:="blue",vvqj:="blue",vvqk:="blue",vvql:="blue",vvqm:="blue",vvqn:="blue",vvqo:="blue",vvqp:="blue")

# # # #

voxChunkBlock02(xa,xb,xc,xd,xe,xf,xg,xh,va[1],va[2],va[3],va[4],va[5],va[6],va[7],va[8],va[9],va[10],va[11],va[12],va[13],va[14],va[15],va[16],va[17],va[18],va[19],va[20],va[21],va[22],va[23],va[24],va[25],va[26],va[27],va[28],va[29],va[30],va[31],va[32],vb[1],vb[2],vb[3],vb[4],vb[5],vb[6],vb[7],vb[8],vb[9],vb[10],vb[11],vb[12],vb[13],vb[14],vb[15],vb[16],vb[17],vb[18],vb[19],vb[20],vb[21],vb[22],vb[23],vb[24],vb[25],vb[26],vb[27],vb[28],vb[29],vb[30],vb[31],vb[32],vc[1],vc[2],vc[3],vc[4],vc[5],vc[6],vc[7],vc[8],vc[9],vc[10],vc[11],vc[12],vc[13],vc[14],vc[15],vc[16],vc[17],vc[18],vc[19],vc[20],vc[21],vc[22],vc[23],vc[24],vc[25],vc[26],vc[27],vc[28],vc[29],vc[30],vc[31],vc[32],vd[1],vd[2],vd[3],vd[4],vd[5],vd[6],vd[7],vd[8],vd[9],vd[10],vd[11],vd[12],vd[13],vd[14],vd[15],vd[16],vd[17],vd[18],vd[19],vd[20],vd[21],vd[22],vd[23],vd[24],vd[25],vd[26],vd[27],vd[28],vd[29],vd[30],vd[31],vd[32],ve[1],ve[2],ve[3],ve[4],ve[5],ve[6],ve[7],ve[8],ve[9],ve[10],ve[11],ve[12],ve[13],ve[14],ve[15],ve[16],ve[17],ve[18],ve[19],ve[20],ve[21],ve[22],ve[23],ve[24],ve[25],ve[26],ve[27],ve[28],ve[29],ve[30],ve[31],ve[32],vf[1],vf[2],vf[3],vf[4],vf[5],vf[6],vf[7],vf[8],vf[9],vf[10],vf[11],vf[12],vf[13],vf[14],vf[15],vf[16],vf[17],vf[18],vf[19],vf[20],vf[21],vf[22],vf[23],vf[24],vf[25],vf[26],vf[27],vf[28],vf[29],vf[30],vf[31],vf[32],vg[1],vg[2],vg[3],vg[4],vg[5],vg[6],vg[7],vg[8],vg[9],vg[10],vg[11],vg[12],vg[13],vg[14],vg[15],vg[16],vg[17],vg[18],vg[19],vg[20],vg[21],vg[22],vg[23],vg[24],vg[25],vg[26],vg[27],vg[28],vg[29],vg[30],vg[31],vg[32],vh[1],vh[2],vh[3],vh[4],vh[5],vh[6],vh[7],vh[8],vh[9],vh[10],vh[11],vh[12],vh[13],vh[14],vh[15],vh[16],vh[17],vh[18],vh[19],vh[20],vh[21],vh[22],vh[23],vh[24],vh[25],vh[26],vh[27],vh[28],vh[29],vh[30],vh[31],vh[32],vza,vzb,vzc,vzd,vze,vzf,vzg,vzh,vqa,vqb,vqc,vqd,vqe,vqf,vqg,vqh,vqi,vqj,vqk,vql,vqm,vqn,vqo,vqp,vvqa,vvqb,vvqc,vvqd,vvqe,vvqf,vvqg,vvqh,vvqi,vvqj,vvqk,vvql,vvqm,vvqn,vvqo,vvqp)

end

procedure voxChunkBlock02(xa,xb,xc,xd,xe,xf,xg,xh,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,b01,b02,b03,b04,b05,b06,b07,b08,b09,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,c01,c02,c03,c04,c05,c06,c07,c08,c09,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,d01,d02,d03,d04,d05,d06,d07,d08,d09,d10,d11,d12,d13,d14,d15,d16,d17,d18,d19,d20,d21,d22,d23,d24,d25,d26,d27,d28,d29,d30,d31,d32,e01,e02,e03,e04,e05,e06,e07,e08,e09,e10,e11,e12,e13,e14,e15,e16,e17,e18,e19,e20,e21,e22,e23,e24,e25,e26,e27,e28,e29,e30,e31,e32,f01,f02,f03,f04,f05,f06,f07,f08,f09,f10,f11,f12,f13,f14,f15,f16,f17,f18,f19,f20,f21,f22,f23,f24,f25,f26,f27,f28,f29,f30,f31,f32,g01,g02,g03,g04,g05,g06,g07,g08,g09,g10,g11,g12,g13,g14,g15,g16,g17,g18,g19,g20,g21,g22,g23,g24,g25,g26,g27,g28,g29,g30,g31,g32,h01,h02,h03,h04,h05,h06,h07,h08,h09,h10,h11,h12,h13,h14,h15,h16,h17,h18,h19,h20,h21,h22,h23,h24,h25,h26,h27,h28,h29,h30,h31,h32,za,zb,zc,zd,ze,zf,zg,zh,qa,qb,qc,qd,qe,qf,qg,qh,qi,qj,qk,ql,qm,qn,qo,qp,qqa,qqb,qqc,qqd,qqe,qqf,qqg,qqh,qqi,qqj,qqk,qql,qqm,qqn,qqo,qqp)

s := (1)

va:=[a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32]
vb:=[b01,b02,b03,b04,b05,b06,b07,b08,b09,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32]
vc:=[c01,c02,c03,c04,c05,c06,c07,c08,c09,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32]
vd:=[d01,d02,d03,d04,d05,d06,d07,d08,d09,d10,d11,d12,d13,d14,d15,d16,d17,d18,d19,d20,d21,d22,d23,d24,d25,d26,d27,d28,d29,d30,d31,d32]

ve:=[e01,e02,e03,e04,e05,e06,e07,e08,e09,e10,e11,e12,e13,e14,e15,e16,e17,e18,e19,e20,e21,e22,e23,e24,e25,e26,e27,e28,e29,e30,e31,e32]
vf:=[f01,f02,f03,f04,f05,f06,f07,f08,f09,f10,f11,f12,f13,f14,f15,f16,f17,f18,f19,f20,f21,f22,f23,f24,f25,f26,f27,f28,f29,f30,f31,f32]
vg:=[g01,g02,g03,g04,g05,g06,g07,g08,g09,g10,g11,g12,g13,g14,g15,g16,g17,g18,g19,g20,g21,g22,g23,g24,g25,g26,g27,g28,g29,g30,g31,g32]
vh:=[h01,h02,h03,h04,h05,h06,h07,h08,h09,h10,h11,h12,h13,h14,h15,h16,h17,h18,h19,h20,h21,h22,h23,h24,h25,h26,h27,h28,h29,h30,h31,h32]

(xa01:=va[1],xa02:=va[2],xa03:=va[3],xa04:=va[4],xa05:=va[5],xa06:=va[6],xa07:=va[7],xa08:=va[8])
(xa09:=va[9],xa10:=va[10],xa11:=va[11],xa12:=va[12],xa13:=va[13],xa14:=va[14],xa15:=va[15])
(xa16:=va[16],xa17:=va[17],xa18:=va[18],xa19:=va[19],xa20:=va[20],xa21:=va[21],xa22:=va[22])
(xa23:=va[23],xa24:=va[24],xa25:=va[25],xa26:=va[26],xa27:=va[27],xa28:=va[28],xa29:=va[29],
xa30:=va[30],xa31:=va[31],xa32:=va[32])

(xb01:=vb[1],xb02:=vb[2],xb03:=vb[3],xb04:=vb[4],xb05:=vb[5],xb06:=vb[6],xb07:=vb[7],xb08:=vb[8])
(xb09:=vb[9],xb10:=vb[10],xb11:=vb[11],xb12:=vb[12],xb13:=vb[13],xb14:=vb[14],xb15:=vb[15])
(xb16:=vb[16],xb17:=vb[17],xb18:=vb[18],xb19:=vb[19],xb20:=vb[20],xb21:=vb[21],xb22:=vb[22])
(xb23:=vb[23],xb24:=vb[24],xb25:=vb[25],xb26:=vb[26],xb27:=vb[27],xb28:=vb[28],xb29:=vb[29],
xb30:=vb[30],xb31:=vb[31],xb32:=vb[32])

(xc01:=vc[1],xc02:=vc[2],xc03:=vc[3],xc04:=vc[4],xc05:=vc[5],xc06:=vc[6],xc07:=vc[7],xc08:=vc[8])
(xc09:=vc[9],xc10:=vc[10],xc11:=vc[11],xc12:=vc[12],xc13:=vc[13],xc14:=vc[14],xc15:=vc[15])
(xc16:=vc[16],xc17:=vc[17],xc18:=vc[18],xc19:=vc[19],xc20:=vc[20],xc21:=vc[21],xc22:=vc[22])
(xc23:=vc[23],xc24:=vc[24],xc25:=vc[25],xc26:=vc[26],xc27:=vc[27],xc28:=vc[28],xc29:=vc[29],
xc30:=vc[30],xc31:=vc[31],xc32:=vc[32])

(xd01:=vd[1],xd02:=vd[2],xd03:=vd[3],xd04:=vd[4],xd05:=vd[5],xd06:=vd[6],xd07:=vd[7],xd08:=vd[8])
(xd09:=vd[9],xd10:=vd[10],xd11:=vd[11],xd12:=vd[12],xd13:=vd[13],xd14:=vd[14],xd15:=vd[15])
(xd16:=vd[16],xd17:=vd[17],xd18:=vd[18],xd19:=vd[19],xd20:=vd[20],xd21:=vd[21],xd22:=vd[22])
(xd23:=vd[23],xd24:=vd[24],xd25:=vd[25],xd26:=vd[26],xd27:=vd[27],xd28:=vd[28],xd29:=vd[29],
xd30:=vd[30],xd31:=vd[31],xd32:=vd[32])

##################################################################

(xe01:=ve[1],xe02:=ve[2],xe03:=ve[3],xe04:=ve[4],xe05:=ve[5],xe06:=ve[6],xe07:=ve[7],xe08:=ve[8])
(xe09:=ve[9],xe10:=ve[10],xe11:=ve[11],xe12:=ve[12],xe13:=ve[13],xe14:=ve[14],xe15:=ve[15])
(xe16:=ve[16],xe17:=ve[17],xe18:=ve[18],xe19:=ve[19],xe20:=ve[20],xe21:=ve[21],xe22:=ve[22])
(xe23:=ve[23],xe24:=ve[24],xe25:=ve[25],xe26:=ve[26],xe27:=ve[27],xe28:=ve[28],xe29:=ve[29],
xe30:=ve[30],xe31:=ve[31],xe32:=ve[32])

(xf01:=vf[1],xf02:=vf[2],xf03:=vf[3],xf04:=vf[4],xf05:=vf[5],xf06:=vf[6],xf07:=vf[7],xf08:=vf[8])
(xf09:=vf[9],xf10:=vf[10],xf11:=vf[11],xf12:=vf[12],xf13:=vf[13],xf14:=vf[14],xf15:=vf[15])
(xf16:=vf[16],xf17:=vf[17],xf18:=vf[18],xf19:=vf[19],xf20:=vf[20],xf21:=vf[21],xf22:=vf[22])
(xf23:=vf[23],xf24:=vf[24],xf25:=vf[25],xf26:=vf[26],xf27:=vf[27],xf28:=vf[28],xf29:=vf[29],
xf30:=vf[30],xf31:=vf[31],xf32:=vf[32])

(xg01:=vg[1],xg02:=vg[2],xg03:=vg[3],xg04:=vg[4],xg05:=vg[5],xg06:=vg[6],xg07:=vg[7],xg08:=vg[8])
(xg09:=vg[9],xg10:=vg[10],xg11:=vg[11],xg12:=vg[12],xg13:=vg[13],xg14:=vg[14],xg15:=vg[15])
(xg16:=vg[16],xg17:=vg[17],xg18:=vg[18],xg19:=vg[19],xg20:=vg[20],xg21:=vg[21],xg22:=vg[22])
(xg23:=vg[23],xg24:=vg[24],xg25:=vg[25],xg26:=vg[26],xg27:=vg[27],xg28:=vg[28],xg29:=vg[29],
xg30:=vg[30],xg31:=vg[31],xg32:=vg[32])

(xh01:=vh[1],xh02:=vh[2],xh03:=vh[3],xh04:=vh[4],xh05:=vh[5],xh06:=vh[6],xh07:=vh[7],xh08:=vh[8])
(xh09:=vh[9],xh10:=vh[10],xh11:=vh[11],xh12:=vh[12],xh13:=vh[13],xh14:=vh[14],xh15:=vh[15])
(xh16:=vh[16],xh17:=vh[17],xh18:=vh[18],xh19:=vh[19],xh20:=vh[20],xh21:=vh[21],xh22:=vh[22])
(xh23:=vh[23],xh24:=vh[24],xh25:=vh[25],xh26:=vh[26],xh27:=vh[27],xh28:=vh[28],xh29:=vh[29],
xh30:=vh[30],xh31:=vh[31],xh32:=vh[32])

################################################################

voxChunkBlock01(xa,xb,xc,xd,xe,xf,xg,xh,xa01,xa02,xa03,xa04,xa05,xa06,xa07,xa08,xa09,xa10,xa11,xa12,xa13,xa14,xa15,xa16,xa17,xa18,xa19,xa20,xa21,xa22,xa23,xa24,xa25,xa26,xa27,xa28,xa29,xa30,xa31,xa32,
za,za,za,za,za,za,za,za,s,qa,qb,qc,qd)

voxChunkBlock01(xa,xb,xc,xd,xe,xf,xg,xh,xb01,xb02,xb03,xb04,xb05,xb06,xb07,xb08,xb09,xb10,xb11,xb12,xb13,xb14,xb15,xb16,xb17,xb18,xb19,xb20,xb21,xb22,xb23,xb24,xb25,xb26,xb27,xb28,xb29,xb30,xb31,xb32,
zb,zb,zb,zb,zb,zb,zb,zb,s,qe,qf,qg,qh)

voxChunkBlock01(xa,xb,xc,xd,xe,xf,xg,xh,xc01,xc02,xc03,xc04,xc05,xc06,xc07,xc08,xc09,xc10,xc11,xc12,xc13,xc14,xc15,xc16,xc17,xc18,xc19,xc20,xc21,xc22,xc23,xc24,xc25,xc26,xc27,xc28,xc29,xc30,xc31,xc32,
zc,zc,zc,zc,zc,zc,zc,zc,s,qi,qj,qk,ql)

voxChunkBlock01(xa,xb,xc,xd,xe,xf,xg,xh,xd01,xd02,xd03,xd04,xd05,xd06,xd07,xd08,xd09,xd10,xd11,xd12,xd13,xd14,xd15,xd16,xd17,xd18,xd19,xd20,xd21,xd22,xd23,xd24,xd25,xd26,xd27,xd28,xd29,xd30,xd31,xd32,
zd,zd,zd,zd,zd,zd,zd,zd,s,qm,qn,qo,qp)

#################################################################

voxChunkBlock01(xa,xb,xc,xd,xe,xf,xg,xh,xe01,xe02,xe03,xe04,xe05,xe06,xe07,xe08,xe09,xe10,xe11,xe12,xe13,xe14,xe15,xe16,xe17,xe18,xe19,xe20,xe21,xe22,xe23,xe24,xe25,xe26,xe27,xe28,xe29,xe30,xe31,xe32,
ze,ze,ze,ze,ze,ze,ze,ze,s,qqa,qqb,qqc,qqd)

voxChunkBlock01(xa,xb,xc,xd,xe,xf,xg,xh,xf01,xf02,xf03,xf04,xf05,xf06,xf07,xf08,xf09,xf10,xf11,xf12,xf13,xf14,xf15,xf16,xf17,xf18,xf19,xf20,xf21,xf22,xf23,xf24,xf25,xf26,xf27,xf28,xf29,xf30,xf31,xf32,
zf,zf,zf,zf,zf,zf,zf,zf,s,qqe,qqf,qqg,qqh)

voxChunkBlock01(xa,xb,xc,xd,xe,xf,xg,xh,xg01,xg02,xg03,xg04,xg05,xg06,xg07,xg08,xg09,xg10,xg11,xg12,xg13,xg14,xg15,xg16,xg17,xg18,xg19,xg20,xg21,xg22,xg23,xg24,xg25,xg26,xg27,xg28,xg29,xg30,xg31,xg32,
zg,zg,zg,zg,zg,zg,zg,zg,s,qqi,qqj,qqk,qql)

voxChunkBlock01(xa,xb,xc,xd,xe,xf,xg,xh,xh01,xh02,xh03,xh04,xh05,xh06,xh07,xh08,xh09,xh10,xh11,xh12,xh13,xh14,xh15,xh16,xh17,xh18,xh19,xh20,xh21,xh22,xh23,xh24,xh25,xh26,xh27,xh28,xh29,xh30,xh31,xh32,
zh,zh,zh,zh,zh,zh,zh,zh,s,qqm,qqn,qqo,qqp)

#################################################################

end

procedure voxChunkBlock01(xa,xaa,xb,xbb,xc,xcc,xd,xdd,ya,yya,yyya,yyyya,yb,yyb,yyyb,yyyyb,yc,yyc,yyyc,yyyyc,yd,yyd,yyyd,yyyyd,ye,yye,
yyye,yyyye,yf,yyf,yyyf,yyyyf,yg,yyg,yyyg,yyyyg,yh,yyh,yyyh,yyyyh,za,zaa,zb,zbb,zc,zcc,zd,zdd,s,qa,qb,qc,qd)


voxChunk01(xa,ya,yya,yyya,yyyya,za,s,qa)
voxChunk01(xaa,yb,yyb,yyyb,yyyyb,zaa,s,qa)
voxChunk01(xb,yc,yyc,yyyc,yyyyc,zb,s,qb)
voxChunk01(xbb,yd,yyd,yyyd,yyyyd,zbb,s,qb)
voxChunk01(xc,ye,yye,yyye,yyyye,zc,s,qc)
voxChunk01(xcc,yf,yyf,yyyf,yyyyf,zcc,s,qc)
voxChunk01(xd,yg,yyg,yyyg,yyyyg,zd,s,qd)
voxChunk01(xdd,yh,yyh,yyyh,yyyyh,zdd,s,qd)

end
       
procedure voxChunk01(x,y,yy,yyy,yyyy,z,s,rgb)

Fg(rgb)

         DrawCube(x,y,z,s)
         DrawCube(x+1,yy,z,s)
         DrawCube(x+2,yyy,z,s)
         DrawCube(x+3,yyyy,z,s)
        
end



#END OF PROGRAM########################################
#####################################################################################################################



